{"title":"SafeMath v0.1.9 [library]","fileName":"/contracts/SafeMath.sol - 0x6d83485ae971ab2151f898db2bd862ec69020a28 [Net 1, Chain 1]","name":"SafeMath","abi":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"sq","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"sqrt","outputs":[{"name":"y","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"add","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"div","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"sub","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"mul","outputs":[{"name":"c","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"pwr","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bin":"610559610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f300730000000000000000000000000000000000000000301460806040526004361061009a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308fe23ca1461009f578063677342ce146100e0578063771602f714610121578063a391c15b1461016c578063b67d77c5146101b7578063c8a4ac9c14610202578063f74e9bde1461024d575b600080fd5b8180156100ab57600080fd5b506100ca60048036038101908080359060200190929190505050610298565b6040518082815260200191505060405180910390f35b8180156100ec57600080fd5b5061010b600480360381019080803590602001909291905050506102ab565b6040518082815260200191505060405180910390f35b81801561012d57600080fd5b506101566004803603810190808035906020019092919080359060200190929190505050610304565b6040518082815260200191505060405180910390f35b81801561017857600080fd5b506101a1600480360381019080803590602001909291908035906020019092919050505061038c565b6040518082815260200191505060405180910390f35b8180156101c357600080fd5b506101ec60048036038101908080359060200190929190803590602001909291905050506103a7565b6040518082815260200191505060405180910390f35b81801561020e57600080fd5b50610237600480360381019080803590602001909291908035906020019092919050505061042c565b6040518082815260200191505060405180910390f35b81801561025957600080fd5b5061028260048036038101908080359060200190929190803590602001909291905050506104d0565b6040518082815260200191505060405180910390f35b60006102a4828361042c565b9050919050565b60008060026102bb846001610304565b8115156102c457fe5b0490508291505b818110156102fe5780915060026102ed82858115156102e657fe5b0483610304565b8115156102f657fe5b0490506102cb565b50919050565b60008183019050828110151515610383576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f536166654d61746820616464206661696c65640000000000000000000000000081525060200191505060405180910390fd5b80905092915050565b600080828481151561039a57fe5b0490508091505092915050565b6000828211151515610421576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f536166654d61746820737562206661696c65640000000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b60008083141561043f57600090506104ca565b818302905081838281151561045057fe5b041415156104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f536166654d617468206d756c206661696c65640000000000000000000000000081525060200191505060405180910390fd5b8090505b92915050565b6000806000808514156104e65760009250610525565b60008414156104f85760019250610525565b849150600190505b8381101561052157610512828661042c565b91508080600101915050610500565b8192505b5050929150505600a165627a7a72305820ca4de08d2617cf2d08c7806d7d891c97d8ab760492dfaab372201dd021401dd90029","opcodes":"PUSH2 0x559 PUSH2 0x30 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH2 0x20 JUMPI PUSH2 0x22 JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN STOP PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9A JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x8FE23CA EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0x677342CE EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x771602F7 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0xA391C15B EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0xB67D77C5 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xC8A4AC9C EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xF74E9BDE EQ PUSH2 0x24D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x298 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x304 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x38C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x42C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x282 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x2A4 DUP3 DUP4 PUSH2 0x42C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH2 0x2BB DUP5 PUSH1 0x1 PUSH2 0x304 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x2C4 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP3 SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2FE JUMPI DUP1 SWAP2 POP PUSH1 0x2 PUSH2 0x2ED DUP3 DUP6 DUP2 ISZERO ISZERO PUSH2 0x2E6 JUMPI INVALID JUMPDEST DIV DUP4 PUSH2 0x304 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x2F6 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x2CB JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 ADD SWAP1 POP DUP3 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x383 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D61746820616464206661696C656400000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 0x39A JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x421 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D61746820737562206661696C656400000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x4CA JUMP JUMPDEST DUP2 DUP4 MUL SWAP1 POP DUP2 DUP4 DUP3 DUP2 ISZERO ISZERO PUSH2 0x450 JUMPI INVALID JUMPDEST DIV EQ ISZERO ISZERO PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D617468206D756C206661696C656400000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP6 EQ ISZERO PUSH2 0x4E6 JUMPI PUSH1 0x0 SWAP3 POP PUSH2 0x525 JUMP JUMPDEST PUSH1 0x0 DUP5 EQ ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x1 SWAP3 POP PUSH2 0x525 JUMP JUMPDEST DUP5 SWAP2 POP PUSH1 0x1 SWAP1 POP JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x521 JUMPI PUSH2 0x512 DUP3 DUP7 PUSH2 0x42C JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x500 JUMP JUMPDEST DUP2 SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xca 0x4d 0xe0 DUP14 0x26 OR 0xcf 0x2d ADDMOD 0xc7 DUP1 PUSH14 0x7D891C97D8AB760492DFAAB37220 SAR 0xd0 0x21 BLOCKHASH SAR 0xd9 STOP 0x29 ","source":"pragma solidity ^0.4.24;\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr\n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}","abiDocs":[{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"sq","payable":false,"stateMutability":"nonpayable","type":"function","details":"gives square. multiplies x by x","signature":"sq(uint256)","signatureHash":"08fe23ca"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"sqrt","payable":false,"stateMutability":"nonpayable","type":"function","details":"gives square root of given x.","signature":"sqrt(uint256)","signatureHash":"677342ce"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"add","payable":false,"stateMutability":"nonpayable","type":"function","details":"Adds two numbers, throws on overflow.","signature":"add(uint256,uint256)","signatureHash":"771602f7"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"div","payable":false,"stateMutability":"nonpayable","type":"function","details":"Integer division of two numbers, truncating the quotient.","signature":"div(uint256,uint256)","signatureHash":"a391c15b"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"sub","payable":false,"stateMutability":"nonpayable","type":"function","details":"Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).","signature":"sub(uint256,uint256)","signatureHash":"b67d77c5"},{"constant":false,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"mul","payable":false,"stateMutability":"nonpayable","type":"function","details":"Multiplies two numbers, throws on overflow.","signature":"mul(uint256,uint256)","signatureHash":"c8a4ac9c"},{"constant":false,"inputs":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"}],"name":"pwr","payable":false,"stateMutability":"nonpayable","type":"function","details":"x to the power of y","signature":"pwr(uint256,uint256)","signatureHash":"f74e9bde"}]}
